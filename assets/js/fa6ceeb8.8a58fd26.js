"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[877],{5154:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var s=r(4848),t=r(8453);const i={sidebar_position:5,slug:"/lab/04"},a="04 - Persistent storage",d={id:"lab/04/index",title:"04 - Persistent storage",description:"Android filesystem",source:"@site/docs/lab/04/index.md",sourceDirName:"lab/04",slug:"/lab/04",permalink:"/docs/lab/04",draft:!1,unlisted:!1,editUrl:"https://github.com/UPB-FILS-MDAD/upb-fils-mdad.github.io/edit/main/docs/lab/04/index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,slug:"/lab/04"},sidebar:"tutorialSidebar",previous:{title:"03 - Services",permalink:"/docs/lab/03"},next:{title:"05 - Broadcasts",permalink:"/docs/lab/05"}},o={},l=[{value:"Android filesystem",id:"android-filesystem",level:2},{value:"Types of application data storage",id:"types-of-application-data-storage",level:2},{value:"App-Specific Storage",id:"app-specific-storage",level:3},{value:"Shared Storage",id:"shared-storage",level:3},{value:"Preferences",id:"preferences",level:3},{value:"Databases",id:"databases",level:3},{value:"Exercises",id:"exercises",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"04---persistent-storage",children:"04 - Persistent storage"})}),"\n",(0,s.jsx)(n.h2,{id:"android-filesystem",children:"Android filesystem"}),"\n",(0,s.jsx)(n.p,{children:"Android uses a file system that's similar to disk-based file systems on other platforms.\nIn the Android file system, there are usually six main partitions found on every device. Some devices may come with a couple of additional partitions, which differ from model to model, but six primary partitions are found on every Android device."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Partition"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Can apps save files here?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/boot"}),(0,s.jsx)(n.td,{children:"Contains the kernel and ramdisk, essential for booting the device."}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/system"}),(0,s.jsx)(n.td,{children:"Houses the Android OS and pre-installed system apps; critical for the device's operation."}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/recovery"}),(0,s.jsx)(n.td,{children:"Allows booting into recovery mode for backups, factory resets, and maintenance tasks."}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/data"}),(0,s.jsx)(n.td,{children:"Stores user data, including apps, settings, contacts, and messages."}),(0,s.jsxs)(n.td,{children:["Yes (App Sandbox - This is the primary location for app-specific data. Each app has a private directory here (",(0,s.jsx)(n.code,{children:"/data/data/<package_name>"}),"))."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/cache"}),(0,s.jsx)(n.td,{children:"Holds frequently accessed app data to improve performance and free up space."}),(0,s.jsx)(n.td,{children:"Yes (Limited)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/misc"}),(0,s.jsx)(n.td,{children:"Stores miscellaneous system settings like USB configuration and carrier ID."}),(0,s.jsx)(n.td,{children:"No"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Other common partions include :"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Partition"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Can apps save files here?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/sdcard"}),(0,s.jsx)(n.td,{children:"User-accessible storage for files and data; can refer to internal or external SD cards."}),(0,s.jsx)(n.td,{children:"Yes (Scoped Access)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"/sd-ext"}),(0,s.jsx)(n.td,{children:"An additional SD card partition for storing app data, often used with custom ROMs or mods."}),(0,s.jsx)(n.td,{children:"Yes (with Custom ROMs)"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-application-data-storage",children:"Types of application data storage"}),"\n",(0,s.jsx)(n.p,{children:"Android provides several ways to store data, each suitable for different purposes."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"App-specific storage"}),": Store files that are meant for your app's use only, either in dedicated directories within an internal storage volume or different dedicated directories within external storage. Use the directories within internal storage to save sensitive information that other apps shouldn't access."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared storage"}),": Store files that your app intends to share with other apps, including media, documents, and other files."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Preferences"}),": Store private, primitive data in key-value pairs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Databases"}),": Store structured data in a private database using the Room persistence library."]}),"\n"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"More about data/files types"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"Type of content"}),(0,s.jsx)(n.th,{children:"Access method"}),(0,s.jsx)(n.th,{children:"Permissions needed"}),(0,s.jsx)(n.th,{children:"Can other apps access?"}),(0,s.jsx)(n.th,{children:"Files removed on app uninstall?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/app-specific",children:"App-specific files"})}),(0,s.jsx)(n.td,{children:"Files meant for your app's use only"}),(0,s.jsxs)(n.td,{children:["From internal storage, ",(0,s.jsx)(n.code,{children:"getFilesDir()"})," or ",(0,s.jsx)(n.code,{children:"getCacheDir()"}),"          From external storage, ",(0,s.jsx)(n.code,{children:"getExternalFilesDir()"})," or ",(0,s.jsx)(n.code,{children:"getExternalCacheDir()"})]}),(0,s.jsx)(n.td,{children:"Never needed for internal storage          Not needed for external storage when your app is used on devices that run Android 4.4 (API level 19) or higher"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/shared/media",children:"Media"})}),(0,s.jsx)(n.td,{children:"Shareable media files (images, audio files, videos)"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"MediaStore"})," API"]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"READ_EXTERNAL_STORAGE"})," when accessing other apps' files on Android\xa011 (API level\xa030) or higher          ",(0,s.jsx)(n.code,{children:"READ_EXTERNAL_STORAGE"})," or ",(0,s.jsx)(n.code,{children:"WRITE_EXTERNAL_STORAGE"})," when accessing other apps' files on Android\xa010 (API level 29)          Permissions are required for ",(0,s.jsx)(n.strong,{children:"all"})," files on Android 9 (API level 28) or lower"]}),(0,s.jsxs)(n.td,{children:["Yes, though the other app needs the ",(0,s.jsx)(n.code,{children:"READ_EXTERNAL_STORAGE"})," permission"]}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/shared/documents-files",children:"Documents and other files"})}),(0,s.jsx)(n.td,{children:"Other types of shareable content, including downloaded files"}),(0,s.jsx)(n.td,{children:"Storage Access Framework"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Yes, through the system file picker"}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/shared-preferences",children:"App preferences"})}),(0,s.jsx)(n.td,{children:"Key-value pairs"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.a,{href:"https://developer.android.com/develop/ui/views/components/settings/use-saved-values",children:"Jetpack Preferences"})," library"]}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Database"}),(0,s.jsx)(n.td,{children:"Structured data"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/room",children:"Room"})," persistence library"]}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"app-specific-storage",children:"App-Specific Storage"}),"\n",(0,s.jsx)(n.p,{children:"App-specific storage refers to files stored in directories dedicated to your app, either in internal storage (private to your app) or external storage (visible but scoped to your app starting from Android 10)."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"use"})," and ",(0,s.jsx)(n.code,{children:"useLines"})," constructs are Kotlin features that ensure resources such as streams or buffers are closed properly after usage, avoiding memory leaks. For reading operations, a buffered reader is employed, which wraps an input stream to improve performance by reading chunks of data into memory instead of processing it byte by byte."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Internal Storage: Use this for sensitive information, as only your app can access these files."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Writing to internal storage"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun writeToInternalStorage(filename: String, content: String) {\n    openFileOutput(filename, Context.MODE_PRIVATE).use {\n        it.write(content.toByteArray())\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reading from internal storage"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun readFromInternalStorage(filename: String): String {\n    return openFileInput(filename).bufferedReader().useLines { it.joinToString() }\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["External Storage: Suitable for non-sensitive files.\nA ",(0,s.jsx)(n.code,{children:"File"})," object encapsulates the file path and is combined with ",(0,s.jsx)(n.code,{children:"FileOutputStream"})," to perform write operations, while ",(0,s.jsx)(n.code,{children:"FileInputStream"})," with a buffered reader is used to read data in a structured way."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Writing to external storage"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun writeToExternalStorage(filename: String, content: String) {\n    if (Environment.MEDIA_MOUNTED == Environment.getExternalStorageState()) {\n        val file = File(getExternalFilesDir(null), filename)\n        FileOutputStream(file).use {\n            it.write(content.toByteArray())\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reading from external storage"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'private fun readFromExternalStorage(filename: String): String {\n    val file = File(getExternalFilesDir(null), filename)\n    return if (file.exists()) {\n        FileInputStream(file).bufferedReader().useLines { it.joinToString() }\n    } else {\n        "File not found"\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Additional permission have to be specified in the ",(0,s.jsx)(n.code,{children:"AndroidManifest.xml"})," file."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:' <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />\n'})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"shared-storage",children:"Shared Storage"}),"\n",(0,s.jsx)(n.p,{children:"Shared storage is for files like media (images, videos, audio) and documents that can be accessed by other apps.\nMediaStore API is used to store and retrieve files while respecting scoped storage policies on Android 10+."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Writing to shared storage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ContentResolver"})," is used to interact with the shared storage through ",(0,s.jsx)(n.code,{children:"MediaStore"}),".\nA ",(0,s.jsx)(n.code,{children:"ContentValues"})," object stores file metadata like:"]}),"\n",(0,s.jsxs)(n.p,{children:["File name (",(0,s.jsx)(n.code,{children:"DISPLAY_NAME"}),").\nFile type (",(0,s.jsx)(n.code,{children:"MIME_TYPE"}),").\nPath to save the file (",(0,s.jsx)(n.code,{children:"RELATIVE_PATH"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"insert()"})," creates a new file entry in the shared storage, and its Uri is returned.\n",(0,s.jsx)(n.code,{children:"openOutputStream()"})," writes the content to the file, wrapped in a use block to ensure the stream is closed automatically.\n",(0,s.jsx)(n.code,{children:"flush()"})," ensures all data is saved to the file system."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'\nfun writeTextFile(context: Context, fileName: String, fileContent: String) {\n    val resolver = context.contentResolver\n    val contentValues = ContentValues().apply {\n        put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)\n        put(MediaStore.MediaColumns.MIME_TYPE, "text/plain")\n        put(MediaStore.MediaColumns.RELATIVE_PATH, "Documents/")  // Path for shared storage\n    }\n\n    val fileUri: Uri? = resolver.insert(MediaStore.Files.getContentUri("external"), contentValues)\n    fileUri?.let {\n        resolver.openOutputStream(it)?.use { outputStream ->\n            outputStream.write(fileContent.toByteArray())\n            outputStream.flush()\n        }\n    }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Reading from shared storage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ContentResolver"})," queries the ",(0,s.jsx)(n.code,{children:"MediaStore"})," to find the file by its name.\nThe query returns a ",(0,s.jsx)(n.code,{children:"Cursor"})," that:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Checks if the file exists using ",(0,s.jsx)(n.code,{children:"moveToFirst()"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Retrieves the file\u2019s path using the DATA column."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["A File object reads the file using ",(0,s.jsx)(n.code,{children:"readText()"})," to get its content."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'\nfun readTextFile(context: Context, fileName: String): String? {\n    val resolver = context.contentResolver\n    val projection = arrayOf(MediaStore.MediaColumns.DISPLAY_NAME, MediaStore.MediaColumns.DATA)\n    val selection = "${MediaStore.MediaColumns.DISPLAY_NAME} = ?"\n    val selectionArgs = arrayOf(fileName)\n    val uri: Uri = MediaStore.Files.getContentUri("external")\n\n    resolver.query(uri, projection, selection, selectionArgs, null)?.use { cursor ->\n        if (cursor.moveToFirst()) {\n            val filePath = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA))\n            return filePath?.let {\n                return File(it).readText()\n            }\n        }\n    }\n    return null  // Return null if file not found\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"preferences",children:"Preferences"}),"\n",(0,s.jsx)(n.p,{children:"Preferences allow you to store private, primitive data (e.g., String, int, boolean) in key-value pairs using SharedPreferences.\nSuitable for lightweight data like user settings, flags, or configuration."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"initializing preferences"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'"AppPrefs"'})," is the name of the ",(0,s.jsx)(n.code,{children:"SharedPreferences"})," file where data will be stored. If a file with this name doesn't exist, Android creates it.\nMultiple ",(0,s.jsx)(n.code,{children:"SharedPreferences"})," files can exist; the name ensures you\u2019re accessing the correct one.\n",(0,s.jsx)(n.code,{children:"Context.MODE_PRIVATE"})," defines the access mode for the file. ",(0,s.jsx)(n.code,{children:"MODE_PRIVATE"})," means the file is accessible only to your app."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'  private lateinit var sharedPreferences: SharedPreferences\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n      \n      sharedPreferences = getSharedPreferences("AppPrefs", Context.MODE_PRIVATE)\n\n      ...\n  }\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"writing to preferences"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun saveToSharedPreferences(key: String, value: String) {\n    with(sharedPreferences.edit()) {\n        putString(key, value)\n        apply()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For other value types you can use ",(0,s.jsx)(n.code,{children:"putInt()"}),"  ",(0,s.jsx)(n.code,{children:"putBoolean()"})," etc"]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"reading from preferences"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun readFromSharedPreferences(key: String): String? {\n    return sharedPreferences.getString(key, "")\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For other value types you can use ",(0,s.jsx)(n.code,{children:"getInt()"}),"  ",(0,s.jsx)(n.code,{children:"getBoolean()"})," etc"]})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"databases",children:"Databases"}),"\n",(0,s.jsx)(n.p,{children:"For structured data, you can use Room, a persistence library that provides an abstraction over SQLite."}),"\n",(0,s.jsx)(n.p,{children:"There are three major components in Room:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://developer.android.com/reference/kotlin/androidx/room/Database",children:"database class"})," that holds the database and serves as the main access point for the underlying connection to your app's persisted data.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"@Database(entities = [User::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/room/defining-data",children:"Data entities"})," that represent tables in your app's database.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@Entity\ndata class User(\n    @PrimaryKey val uid: Int,\n    @ColumnInfo(name = "first_name") val firstName: String?,\n    @ColumnInfo(name = "last_name") val lastName: String?\n)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.android.com/training/data-storage/room/accessing-data",children:"Data access objects (DAOs)"})," that provide methods that your app can use to query, update, insert, and delete data in the database.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@Dao\ninterface UserDao {\n    @Query("SELECT * FROM user")\n    fun getAll(): List<User>\n\n    @Query("SELECT * FROM user WHERE uid IN (:userIds)")\n    fun loadAllByIds(userIds: IntArray): List<User>\n\n    @Query("SELECT * FROM user WHERE first_name LIKE :first AND " +\n        "last_name LIKE :last LIMIT 1")\n    fun findByName(first: String, last: String): User\n\n    @Insert\n    fun insertAll(vararg users: User)\n\n    @Delete\n    fun delete(user: User)\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Using the database"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val db = Room.databaseBuilder(\n        applicationContext,\n        AppDatabase::class.java, "database-name"\n    ).build()\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val userDao = db.userDao()\nval users: List<User> = userDao.getAll()\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"You also need to:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add the required Room dependencies in your build.gradle file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:'plugins {\n    ...\n    id("com.google.devtools.ksp") version "1.9.24-1.0.20"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Make sure your kotlin version is '1.9.24'"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:'dependencies {\n\n    val room_version = "2.6.1"\n\n    ksp("androidx.room:room-compiler:$room_version")\n    implementation("androidx.room:room-ktx:$room_version")\n\n    ...\n}\n'})}),"\n"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"exercises",children:"Exercises"}),"\n",(0,s.jsx)(n.p,{children:"Create an app with a MainActivity that does the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Usea a ",(0,s.jsx)(n.strong,{children:"sharedPreferences"})," to save a boolean which indicates which theme should be loaded when the app starts (Light or Dark). Use a toggle button to swich between themes."]}),"\n",(0,s.jsxs)(n.li,{children:["Create a ",(0,s.jsx)(n.code,{children:"student"})," table in a ",(0,s.jsx)(n.strong,{children:"room database"})," that has the following columns: ",(0,s.jsx)(n.code,{children:"Name"}),", ",(0,s.jsx)(n.code,{children:"Year"}),", ",(0,s.jsx)(n.code,{children:"MeanGrade"}),". Insert a few entries in the database. Display them in the ",(0,s.jsx)(n.code,{children:"MainActivity"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Write to the internal ",(0,s.jsx)(n.strong,{children:"app-specific storage"})," a .txt file that contains a list with all the students sorted alphabetically."]}),"\n",(0,s.jsxs)(n.li,{children:["Write to the ",(0,s.jsx)(n.strong,{children:"shared storage"})," a .txt file that contains a list with all the students sorted by MeanGrade."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.a,{href:"https://developer.android.com/studio/debug/device-file-explorer",children:"Device File Explorer"})," to view the .txt files."]})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);